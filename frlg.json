[{"args":[],"structure":"<B","cmd":0,"doc_string":"Does nothing.","name":"nop"},{"args":[],"structure":"<B","cmd":1,"doc_string":"Does nothing.","name":"nop1"},{"args":[],"structure":"<B","cmd":2,"doc_string":"Terminates script execution.","name":"end"},{"args":[],"structure":"<B","cmd":3,"doc_string":"Jumps back to after the last-executed call statement, and continues script execution from there.","name":"_return"},{"args":[{"kind":"pointer","name":" destination"}],"structure":"<BI","cmd":4,"doc_string":"Jumps to destination and continues script execution from there. The location of the calling script is remembered and can be returned to later.\n\nThe maximum script depth (that is, the maximum nested calls you can make) is 20. When this limit is reached, the game starts treating call as goto.[source]\n\npointer:\t destination","name":"call"},{"args":[{"kind":"pointer","name":" destination"}],"structure":"<BI","cmd":5,"doc_string":"Jumps to destination and continues script execution from there.\n\npointer:\t destination","name":"goto"},{"args":[{"kind":"byte","name":" condition"},{"kind":"pointer","name":" destination"}],"structure":"<BBI","cmd":6,"doc_string":"If the result of the last comparison matches condition (see Comparison operators), jumps to destination and continues script execution from there.\n\nXSE automatically converts the slightly-more-readable form if condition goto pointer to an if1.\n\nbyte:\t condition\npointer:\t destination","name":"if1"},{"args":[{"kind":"byte","name":" condition"},{"kind":"pointer","name":" destination"}],"structure":"<BBI","cmd":7,"doc_string":"If the result of the last comparison matches condition (see Comparison operators), calls destination.\n\nXSE automatically converts the slightly-more-readable form if condition call pointer to an if2.\n\nbyte:\t condition\npointer:\t destination","name":"if2"},{"args":[{"kind":"byte","name":" function"}],"structure":"<BB","cmd":8,"doc_string":"Jumps to the standard function at index function.\n\nbyte:\t function","name":"gotostd"},{"args":[{"kind":"byte","name":" function"}],"structure":"<BB","cmd":9,"doc_string":"Calls the standard function at index function.\n\nbyte:\t function","name":"callstd"},{"args":[{"kind":"byte","name":" condition"},{"kind":"byte","name":" function"}],"structure":"<BBB","cmd":10,"doc_string":"If the result of the last comparison matches condition (see Comparison operators), jumps to the standard function at index function.\n\nbyte:\t condition\nbyte:\t function","name":"gotostdif"},{"args":[{"kind":"byte","name":" condition"},{"kind":"byte","name":" function"}],"structure":"<BBB","cmd":11,"doc_string":"If the result of the last comparison matches condition (see Comparison operators), calls the standard function at index function.\n\nbyte:\t condition\nbyte:\t function","name":"callstdif"},{"args":[],"structure":"<B","cmd":12,"doc_string":"Executes a script stored in a default RAM location.","name":"jumpram"},{"args":[],"structure":"<B","cmd":13,"doc_string":"Terminates script execution and \"resets the script RAM\".","name":"killscript"},{"args":[{"kind":"byte","name":" value"}],"structure":"<BB","cmd":14,"doc_string":"Pads the specified value to a dword, and then writes that dword to a predefined address (0x0203AAA8).\n\n(What does that RAM offset do?)\n\nbyte:\t value","name":"setbyte"},{"args":[{"kind":"bank","name":" destination"},{"kind":"dword","name":" value"}],"structure":"<BBI","cmd":15,"doc_string":"Sets the specified script bank to value.\n\n(The function is named \"loadpointer\" because it was originally used to store pointers to strings in script banks, in preparation for certain dialog box-related standard functions. \"Setbank\" would have been a better name.)\n\nbank:\t destination\ndword:\t value","name":"loadpointer"},{"args":[{"kind":"bank","name":" destination"},{"kind":"byte","name":" value"}],"structure":"<BBB","cmd":16,"doc_string":"Sets the specified script bank to value.\n\nbank:\t destination\nbyte:\t value","name":"setbyte2"},{"args":[{"kind":"byte","name":" value"},{"kind":"pointer","name":" offset"}],"structure":"<BBI","cmd":17,"doc_string":"Sets the byte at offset to value.\n\nbyte:\t value\npointer:\t offset","name":"writebytetooffset"},{"args":[{"kind":"bank","name":" destination"},{"kind":"pointer","name":" source"}],"structure":"<BBI","cmd":18,"doc_string":"Copies the byte value at source into the specified script bank.\n\nbank:\t destination\npointer:\t source","name":"loadbytefrompointer"},{"args":[{"kind":"bank","name":" source"},{"kind":"pointer","name":" destination"}],"structure":"<BBI","cmd":19,"doc_string":"Not sure. Judging from XSE's description I think it takes the least-significant byte in bank source and writes it to destination.\n\nbank:\t source\npointer:\t destination","name":"setfarbyte"},{"args":[{"kind":"bank","name":" destination"},{"kind":"bank","name":" source"}],"structure":"<BBB","cmd":20,"doc_string":"Copies the contents of bank source into bank destination.\n\nbank:\t destination\nbank:\t source","name":"copyscriptbanks"},{"args":[{"kind":"pointer","name":" destination"},{"kind":"pointer","name":" source"}],"structure":"<BII","cmd":21,"doc_string":"Copies the byte at source to destination, replacing whatever byte was previously there.\n\npointer:\t destination\npointer:\t source","name":"copybyte"},{"args":[{"kind":"variable","name":" destination"},{"kind":"word","name":" value"}],"structure":"<BHH","cmd":22,"doc_string":"Changes the value of destination to value.\n\nvariable:\t destination\nword:\t value","name":"setvar"},{"args":[{"kind":"variable","name":" destination"},{"kind":"word","name":" value"}],"structure":"<BHH","cmd":23,"doc_string":"Changes the value of destination by adding value to it. Overflow is not prevented (0xFFFF + 1 = 0x0000).\n\nvariable:\t destination\nword:\t value","name":"addvar"},{"args":[{"kind":"variable","name":" destination"},{"kind":"word-or-variable","name":" value"}],"structure":"<BHH","cmd":24,"doc_string":"Changes the value of destination by subtracting value to it. Overflow is not prevented (0x0000 - 1 = 0xFFFF).\n\nvariable:\t destination\nword-or-variable:\t value","name":"subvar"},{"args":[{"kind":"variable","name":" destination"},{"kind":"variable","name":" source"}],"structure":"<BHH","cmd":25,"doc_string":"Copies the value of source into destination.\n\nvariable:\t destination\nvariable:\t source","name":"copyvar"},{"args":[{"kind":"variable","name":" destination"},{"kind":"word-or-variable","name":" source"}],"structure":"<BHH","cmd":26,"doc_string":"If source is not a variable, then this function acts like setvar. Otherwise, it acts like copyvar.\n\n(\"Copyvarifnotzero\" is a misnomer. This function was previously thought to act like copyvar if source was a variable with a non-zero value, and to do nothing otherwise.)\n\nvariable:\t destination\nword-or-variable:\t source","name":"copyvarifnotzero"},{"args":[{"kind":"bank","name":" a"},{"kind":"bank","name":" b"}],"structure":"<BBB","cmd":27,"doc_string":"Compares the values of script banks a and b, after forcing the values to bytes.\n\nWarning: XSE has it wrong. The arguments are bytes, not words. This means that you will need to use #raw to compile a script that uses this command, and that such scripts will not decompile properly.\n\nbank:\t a\nbank:\t b","name":"comparebanks"},{"args":[{"kind":"bank","name":" a"},{"kind":"byte","name":" b"}],"structure":"<BBB","cmd":28,"doc_string":"Compares the least-significant byte of the value of script bank a to a fixed byte value (b).\n\nbank:\t a\nbyte:\t b","name":"comparebanktobyte"},{"args":[{"kind":"bank","name":" a"},{"kind":"pointer","name":" b"}],"structure":"<BBI","cmd":29,"doc_string":"Compares the least-significant byte of the value of script bank a to the byte located at offset b.\n\nbank:\t a\npointer:\t b","name":"comparebanktofarbyte"},{"args":[{"kind":"pointer","name":" a"},{"kind":"bank","name":" b"}],"structure":"<BIB","cmd":30,"doc_string":"Compares the byte located at offset a to the least-significant byte of the value of script bank b.\n\npointer:\t a\nbank:\t b","name":"comparefarbytetobank"},{"args":[{"kind":"pointer","name":" a"},{"kind":"byte","name":" b"}],"structure":"<BIB","cmd":31,"doc_string":"Compares the byte located at offset a to a fixed byte value (b).\n\npointer:\t a\nbyte:\t b","name":"comparefarbytetobyte"},{"args":[{"kind":"pointer","name":" a"},{"kind":"pointer","name":" b"}],"structure":"<BII","cmd":32,"doc_string":"Compares the byte located at offset a to the byte located at offset b.\n\npointer:\t a\npointer:\t b","name":"comparefarbytes"},{"args":[{"kind":"variable","name":" a"},{"kind":"word","name":" b"}],"structure":"<BHH","cmd":33,"doc_string":"Compares the value of a to a fixed word value (b).\n\nvariable:\t a\nword:\t b","name":"compare"},{"args":[{"kind":"variable","name":" a"},{"kind":"variable","name":" b"}],"structure":"<BHH","cmd":34,"doc_string":"Compares the value of a to the value of b.\n\nvariable:\t a\nvariable:\t b","name":"comparevars"},{"args":[{"kind":"pointer","name":" code"}],"structure":"<BI","cmd":35,"doc_string":"Calls the ASM routine stored at code. Script execution is blocked until the ASM returns (bx lr, mov pc, lr, etc.). Remember to add 1 to the offset when calling THUMB code.\n\npointer:\t code","name":"callasm"},{"args":[{"kind":"pointer","name":" asm_pointer"}],"structure":"<BI","cmd":36,"doc_string":"Replaces a pointer in the script engine RAM with asm_pointer.\n\n(The pointer points to a THUMB routine... What effect does replacing it have?)\n\npointer:\t asm_pointer","name":"cmd24"},{"args":[{"kind":"word","name":" function"}],"structure":"<BH","cmd":37,"doc_string":"Calls a special function; that is, a piece of ASM code designed for use by scripts and listed in a table of pointers.\n\nThe special table is located at 0x0815FD60.\n\nword:\t function","name":"special"},{"args":[{"kind":"variable","name":" output"},{"kind":"word","name":" function"}],"structure":"<BHH","cmd":38,"doc_string":"Calls a special function. That function's output (if any) will be written to the variable you specify.\n\nvariable:\t output\nword:\t function","name":"special2"},{"args":[],"structure":"<B","cmd":39,"doc_string":"Blocks script execution until a command or ASM code manually unblocks it. Generally used with specific commands and specials. If this command runs, and a subsequent command or piece of ASM does not unblock state, the script will remain blocked indefinitely (essentially a hang).","name":"waitstate"},{"args":[{"kind":"word","name":" time"}],"structure":"<BH","cmd":40,"doc_string":"Blocks script execution for time (frames? milliseconds?).\n\nA value of 0x0010 represents the amount of time it takes for a walking NPC to move one tile (i.e. dec 16 pixels).\n\nword:\t time","name":"pause"},{"args":[{"kind":"flag-or-variable","name":" a"}],"structure":"<BH","cmd":41,"doc_string":"Sets a to 1.\n\nflag-or-variable:\t a","name":"setflag"},{"args":[{"kind":"flag-or-variable","name":" a"}],"structure":"<BH","cmd":42,"doc_string":"Sets a to 0.\n\nflag-or-variable:\t a","name":"clearflag"},{"args":[{"kind":"flag-or-variable","name":" a"}],"structure":"<BH","cmd":43,"doc_string":"Compares a to 1.\n\nflag-or-variable:\t a","name":"checkflag"},{"args":[],"structure":"<B","cmd":44,"doc_string":"In FireRed, this command is a nop.\n\nWarning: XSE has it wrong. The function has no arguments. This means that you may need to use #raw to compile a script that uses this command, and that such scripts will not decompile properly.","name":"cmd2c"},{"args":[],"structure":"<B","cmd":45,"doc_string":"In FireRed, this command is a nop.\n\nIn R/S/E, it had something to do with flags and the real-time clock.","name":"checkdailyflags"},{"args":[],"structure":"<B","cmd":46,"doc_string":"Resets the values of variables 0x8000, 0x8001, and 0x8002. Related to RTC in RSE?","name":"resetvars"},{"args":[{"kind":"word","name":" sound_number"}],"structure":"<BH","cmd":47,"doc_string":"Plays the specified (sound_number) sound. Only one sound may play at a time, with newer ones interrupting older ones.\n\nIf you specify sound 0x0000, then all music will be muted. If you specify the number of a non-existent sound, no new sound will be played, and currently-playing sounds will not be interrupted. A comprehensive list of sound numbers may be found on PokeCommunity.\n\nNote that when using older versions of VisualBoyAdvance, the sound channel used for this command (and, sometimes, in music) will be completely muted after loading from a savestate.\n\nword:\t sound_number","name":"sound"},{"args":[],"structure":"<B","cmd":48,"doc_string":"Blocks script execution until the currently-playing sound (triggered by sound) finishes playing.\n\n(Does this also block until cries finish playing? The manner in which it's used by default scripts suggests that it might.)","name":"checksound"},{"args":[{"kind":"word-or-variable","name":" fanfare_number"}],"structure":"<BH","cmd":49,"doc_string":"Plays the specified (fanfare_number) fanfare.\n\n(Is it limited to one fanfare at a time, like sound?)\n\nword-or-variable:\t fanfare_number","name":"fanfare"},{"args":[],"structure":"<B","cmd":50,"doc_string":"Blocks script execution until all currently-playing fanfares finish.","name":"waitfanfare"},{"args":[{"kind":"word","name":" song_number"},{"kind":"byte","name":" unknown"}],"structure":"<BHB","cmd":51,"doc_string":"Plays the specified (song_number) song. The byte is apparently supposed to be 0x00.\n\n(I need to test this command to see it has any quirks... And does it accept a variable?)\n\nword:\t song_number\nbyte:\t unknown","name":"playsong"},{"args":[{"kind":"word","name":" song_number"}],"structure":"<BH","cmd":52,"doc_string":"Plays the specified (song_number) song.\n\n(I need to test this command to see it has any quirks... Among other things, it's failed to work for me in situations where playsong has worked. And does it accept a variable?)\n\nword:\t song_number","name":"playsong2"},{"args":[],"structure":"<B","cmd":53,"doc_string":"Crossfades the currently-playing song into the map's default song.\n\n(I need to test this command to see it has any quirks...)","name":"fadedefault"},{"args":[{"kind":"word","name":" song_number"}],"structure":"<BH","cmd":54,"doc_string":"Crossfades the currently-playng song into the specified (song_number) song.\n\n(I need to test this command to see it has any quirks... And does it accept a variable?)\n\nword:\t song_number","name":"fadesong"},{"args":[{"kind":"byte","name":" speed"}],"structure":"<BB","cmd":55,"doc_string":"Fades out the currently-playing song.\n\n(I need to test this command to see it has any quirks... And what unit of measurement is used for speed? And does it accept a variable?)\n\nbyte:\t speed","name":"fadeout"},{"args":[{"kind":"byte","name":" speed"}],"structure":"<BB","cmd":56,"doc_string":"Fades the currently-playing song back in.\n\n(I need to test this command to see it has any quirks... And what unit of measurement is used for speed? And does it accept a variable?)\n\nbyte:\t speed","name":"fadein"},{"args":[{"kind":"byte","name":" bank"},{"kind":"byte","name":" map"},{"kind":"byte","name":" warp"},{"kind":"byte-or-variable","name":" X"},{"kind":"byte-or-variable","name":" Y"}],"structure":"<BBBBHH","cmd":57,"doc_string":"Sends the player to Warp warp on Map bank.map. If the specified warp is 0xFF, then the player will instead be sent to (X, Y) on the map.\n\nThis command will also play Sappy song 0x0009, but only if the bytes at 0x02031DD8 and 0x0203ADFA are not equal to 0x00 and 0x02, respectively.\n\n(Function terminates script execution?)\n\nbyte:\t bank\nbyte:\t map\nbyte:\t warp\nbyte-or-variable:\t X\nbyte-or-variable:\t Y","name":"warp"},{"args":[],"structure":"<B","cmd":58,"doc_string":"Clone of warp that does not play a sound effect.","name":"warpmuted"},{"args":[],"structure":"<B","cmd":59,"doc_string":"Clone of warp that uses \"a walking effect\".\n\n(Any other differences?)","name":"warpwalk"},{"args":[{"kind":"byte","name":" bank"},{"kind":"byte","name":" map"}],"structure":"<BBB","cmd":60,"doc_string":"Warps the player to another map using a hole animation.\n\nWarps to the same X,Y co-ords as the player's when activated.\n\nbyte:\t bank\nbyte:\t map","name":"warphole"},{"args":[],"structure":"<B","cmd":61,"doc_string":"Clone of warp that uses a teleport effect. It is apparently only used in R/S/E.[source]\n\n(Any other differences?)","name":"warpteleport"},{"args":[],"structure":"<B","cmd":62,"doc_string":"Clone of warp. Used by an (unused?) Safari Zone script to return the player to the gatehouse and end the Safari Game.\n\nThe only difference between this and warp/warpmuted are that those two commands write 01 01 00 to 0x02031DD4 when they finish, but this command does not. I don't yet know what this difference means.","name":"warp3"},{"args":[{"kind":"byte","name":" bank"},{"kind":"byte","name":" map"},{"kind":"byte","name":" warp"},{"kind":"word","name":" X"},{"kind":"word","name":" Y"}],"structure":"<BBBBHH","cmd":63,"doc_string":"Sets a default warp place. If a warp tries to send the player to Warp 127 on Map 127.127, they will instead be sent here. Useful when a map has warps that need to go to script-controlled locations (i.e. elevators).\n\n(Does this accept variables for X and Y?)\n\nbyte:\t bank\nbyte:\t map\nbyte:\t warp\nword:\t X\nword:\t Y","name":"setwarpplace"},{"args":[],"structure":"<B","cmd":64,"doc_string":"Clone of warp3, except that this writes data to different offsets...\n\nWith normal warp commands, the stats for the map being entered replace data starting at 0x02031DBC (RAM: current map)... But this warp command instead writes to 0x02031DC4.\n\n(With that in mind, could this have been used internally for DIVE?)","name":"warp4"},{"args":[],"structure":"<B","cmd":65,"doc_string":"Clone of warp3, except that this writes data to different offsets...\n\nWith normal warp commands, the stats for the map being entered replace data starting at 0x02031DBC (RAM: current map)... But this warp command instead writes to 0x02031DCC.\n\n(With that in mind, could this have been used internally for DIVE?)","name":"warp5"},{"args":[{"kind":"variable","name":" X"},{"kind":"variable","name":" Y"}],"structure":"<BHH","cmd":66,"doc_string":"Retrieves the player's zero-indexed X- and Y-coordinates in the map, and stores them in the specified variables.\n\nvariable:\t X\nvariable:\t Y","name":"getplayerpos"},{"args":[],"structure":"<B","cmd":67,"doc_string":"Retrieves the number of Pokémon in the player's party, and stores that number in variable 0x800D (LASTRESULT).","name":"countPokémon"},{"args":[{"kind":"word-or-variable","name":" index"},{"kind":"byte-or-variable","name":" quantity"}],"structure":"<BHH","cmd":68,"doc_string":"Attempts to add quantity of item index to the player's Bag. If the player has enough room, the item will be added and variable 0x800D (LASTRESULT) will be set to 0x0001; otherwise, LASTRESULT is set to 0x0000.\n\nword-or-variable:\t index\nbyte-or-variable:\t quantity","name":"additem"},{"args":[{"kind":"word-or-variable","name":" index"},{"kind":"byte-or-variable","name":" quantity"}],"structure":"<BHH","cmd":69,"doc_string":"Removes quantity of item index from the player's Bag.\n\nIf you attempt to remove more of the item than the player actually has, then this command will do absolutely nothing, and they will keep the item. (For example, attempting to remove 6 Master Balls when the player only has 5 will result in them keeping all 5.)\n\nword-or-variable:\t index\nbyte-or-variable:\t quantity","name":"removeitem"},{"args":[{"kind":"word-or-variable","name":" index"},{"kind":"byte-or-variable","name":" quantity"}],"structure":"<BHH","cmd":70,"doc_string":"Checks if the player has enough space in their Bag to hold quantity more of item index. Sets variable 0x800D (LASTRESULT) to 0x0001 if there is room, or 0x0000 is there is no room.\n\nword-or-variable:\t index\nbyte-or-variable:\t quantity","name":"checkitemroom"},{"args":[{"kind":"word-or-variable","name":" index"},{"kind":"byte-or-variable","name":" quantity"}],"structure":"<BHH","cmd":71,"doc_string":"Checks if the player has quantity or more of item index in their Bag. Sets variable 0x800D (LASTRESULT) to 0x0001 if the player has enough of the item, or 0x0000 if they have fewer than quantity of the item.\n\nword-or-variable:\t index\nbyte-or-variable:\t quantity","name":"checkitem"},{"args":[{"kind":"word-or-variable","name":" index"}],"structure":"<BH","cmd":72,"doc_string":"Checks which Bag pocket the specified (index) item belongs in, and writes the value to variable 0x800D (LASTRESULT). This script is used to show the name of the proper Bag pocket when the player receives an item via callstd (simplified to giveitem in XSE).\n\nReturn values:\n\nword-or-variable:\t index","name":"checkitemtype"},{"args":[{"kind":"word-or-variable","name":" index"},{"kind":"word-or-variable","name":" quantity"}],"structure":"<BHH","cmd":73,"doc_string":"Adds a quantity amount of item index to the player's PC. Both arguments can be variables.\n\nword-or-variable:\t index\nword-or-variable:\t quantity","name":"addpcitem"},{"args":[{"kind":"word-or-variable","name":" index"},{"kind":"word-or-variable","name":" quantity"}],"structure":"<BHH","cmd":74,"doc_string":"Checks for quantity amount of item index in the player's PC. Both arguments can be variables.\n\nReturn values:\n\nword-or-variable:\t index\nword-or-variable:\t quantity","name":"checkpcitem"},{"args":[{"kind":"word-or-variable","name":" a"}],"structure":"<BH","cmd":75,"doc_string":"In FireRed, this command is a nop. (The argument is read, but not used for anything.)\n\nIn R/S/E, it added one of the specified (a) decoration to the player's PC, and stored something in variable 0x800D (LASTRESULT) -- apparently, a value determining whether the decoration was successfully added (0x0001) or not (0x0000).\n\nword-or-variable:\t a","name":"adddecoration"},{"args":[{"kind":"word-or-variable","name":" a"}],"structure":"<BH","cmd":76,"doc_string":"In FireRed, this command is a nop. (The argument is read, but not used for anything.)\n\nIn R/S/E, it removed one of the specified (a) decoration from the player's PC.\n\nword-or-variable:\t a","name":"removedecoration"},{"args":[{"kind":"word-or-variable","name":" a"}],"structure":"<BH","cmd":77,"doc_string":"In FireRed, this command is a nop. (The argument is read, but not used for anything.)\n\nIn R/S/E, it checked to see if the player's PC could store one more of the specified (a) decoration.\n\nword-or-variable:\t a","name":"testdecoration"},{"args":[{"kind":"word-or-variable","name":" a"}],"structure":"<BH","cmd":78,"doc_string":"In FireRed, this command is a nop. (The argument is read, but not used for anything.)\n\nIn R/S/E, it checked to see if the player's PC contained at least one of the specified (a) decoration.\n\nword-or-variable:\t a","name":"checkdecoration"},{"args":[{"kind":"byte-or-variable","name":" index"},{"kind":"pointer","name":" movements"}],"structure":"<BHI","cmd":79,"doc_string":"Applies the movement data at movements to the specified (index) Person event. Also closes any standard message boxes that are still open.\n\nIndices 0xFF and 0x7F refer to the player and the camera, respectively. Running this command from a Script event will crash the game unless that Script event's \"Unknown\" field (in AdvanceMap) is \"$0003\" and its \"Var number\" field refers to a valid script variable.\n\nbyte-or-variable:\t index\npointer:\t movements","name":"applymovement"},{"args":[{"kind":"word","name":" variable containing Person event ID"},{"kind":"pointer","name":" movements"}],"structure":"<BHI","cmd":80,"doc_string":"Apparent clone of applymovement. Oddly, it doesn't seem to work at all if applied to any Person other than the player (0xFF), and the X and Y arguments don't seem to do anything.\n\t\t\tThis command in fact uses variables to access the Person event ID. So, for example, if you setvar 0x8000 to 0x3, and then use applymovementpos 0x8000 @move1, Person event 3 will have the movements at @move1 applied to them. Thank you Shiny Quagsire for bringing this to my attention.\n\nword:\t variable containing Person event ID\npointer:\t movements","name":"applymovementpos"},{"args":[{"kind":"byte-or-variable","name":" index"}],"structure":"<BH","cmd":81,"doc_string":"Blocks script execution until the movements being applied to the specified (index) Person event finish. If the specified Person event is 0x0000, then the command will block script execution until all Person events affected by applymovement finish their movements. If the specified Person event is not currently being manipulated with applymovement, then this command does nothing.\n\nbyte-or-variable:\t index","name":"waitmovement"},{"args":[{"kind":"byte-or-variable","name":" index"},{"kind":"byte","name":" X"},{"kind":"byte","name":" Y"}],"structure":"<BHBB","cmd":82,"doc_string":"Apparent clone of waitmovement. Oddly, it doesn't seem to work at all if applied to any Person other than the player (0xFF), and the X and Y arguments don't seem to do anything.\n\nbyte-or-variable:\t index\nbyte:\t X\nbyte:\t Y","name":"waitmovementpos"},{"args":[{"kind":"byte-or-variable","name":" local_ID"}],"structure":"<BH","cmd":83,"doc_string":"Attempts to hide the specified (local_ID, a local ID) Person event on the current map, by setting its visibility flag if it has a valid one. If the Person does not have a valid visibility flag, this command does nothing.\n\n(For example, if Person event no. 7 has a \"Person number\" of 8 and a \"Person ID\" of $0015, then hidesprite 0x8 will hide that Person event by setting flag 0x015.)\n\nSupplying a local ID of 0xFF (the player) will result in the player taking control of a random Person event on the map, and map drawing will break (drawing chunks of terrain from the player's original position, along with chunks from their new position). This effect lasts until the player exits the map via a warp (I don't know what map connections would do).\n\nbyte-or-variable:\t local_ID","name":"hidesprite"},{"args":[{"kind":"byte-or-variable","name":" index"},{"kind":"byte","name":" X"},{"kind":"byte","name":" Y"}],"structure":"<BHBB","cmd":84,"doc_string":"Clone of hidesprite that also moves the Person? Test it!\n\nbyte-or-variable:\t index\nbyte:\t X\nbyte:\t Y","name":"hidespritepos"},{"args":[],"structure":"<B","cmd":90,"doc_string":"If the script was called by a Person event, then that Person will turn to face toward the tile that the player is stepping off of.","name":"faceplayer"},{"args":[{"kind":"byte","name":" type"},{"kind":"word","name":" index"},{"kind":"word","name":" local_id"},{"kind":"pointer","name":" intro"},{"kind":"pointer","name":" loss"},{"kind":"pointer","name":" extra"},{"kind":"pointer","name":" extra2"}],"structure":"<BBHHIIII","cmd":92,"doc_string":"If the Trainer flag for Trainer index is not set, this command does absolutely nothing.\n\nOtherwise, this command will prepare and then indirectly initiate a trainer battle, blocking script execution until the battle ends. The effects of the battle (and even the number of arguments that the command accepts) differ depending on the first argument (the battle type).\n\nFor most types, if the player defeats the Trainer, then they say the text at loss on the battle screen, their Trainer flag is cleared automatically, and script execution is terminated immediately; if the player loses, they whiteout and script execution terminates.\n\nI'm not too sure what the local_id is used for; most battle types \"prefer\" it set to 0x0000, while setting it to 0x0003 with battle type 9 enables Oak's narration. (Actually, any local ID that, when bitwise-and 3, doesn't equal zero will trigger the narration in a type-9 battle.)\n\ntrainerbattle 0x2 is not identical to trainerbattle 0x1; the former (0x2) plays encounter music, while the latter (0x1) does not.\n\nThe \"Rematch\" types check the specified trainer flag. If that trainer has already been battled, the game will use a table (at 0x0845318C) to find trainer flags associated with rematches against the trainer. The game will search for the earliest cleared rematch flag; it will then check if that rematch is usable based on...\n\nIf the found rematch flag is usable, then the command uses that flag instead of the specified one, and starts a battle. If the found rematch flag is unusable, or if all rematch flags are set, then no battle begins. Essentially, the game will automatically handle rematches for you based on the player's progress through the game world and on how many times the trainer has been defeated.\n\nIf you wish to change which flags enable rematches, you need only edit the dwords at 0x0810CCD8, 0x0810CCE0, 0x0810CCE8, 0x0810CCF0, and 0x0810CD10. If you wish to modify the rematch table, a section in the Appendix describes its structure and function.\n\n(Can the trainer index be a variable? (Check that empirically using an actual script, not ASM examination.) Verify that the unknown word can be used to enable Oak's tutorial narration.)\n\nbyte:\t type\nword:\t index\nword:\t local_id\npointer:\t intro\npointer:\t loss\npointer:\t extra\npointer:\t extra2","name":"trainerbattle"},{"args":[],"structure":"<B","cmd":93,"doc_string":"Starts a trainer battle using the battle information stored in RAM (usually by trainerbattle, which actually calls this command behind-the-scenes), and blocks script execution until the battle finishes.\n\nIf no battle information has been prepared, the player will fight a nameless \"PKMN TRAINER\" (Aqua Leader Archie's sprite) equipped with a team of ?????????? (null Pokémon). The battle type used appears to be 0x00, with empty strings used by the trainer.","name":"repeattrainerbattle"},{"args":[{"kind":"word-or-variable","name":" trainer"}],"structure":"<BH","cmd":96,"doc_string":"Compares Flag (trainer + 0x500) to 1. (If the flag is set, then the trainer has been defeated by the player.)\n\nword-or-variable:\t trainer","name":"checktrainerflag"},{"args":[{"kind":"word-or-variable","name":" trainer"}],"structure":"<BH","cmd":97,"doc_string":"Sets Flag (trainer + 0x500). (I didn't make a mistake. The command names actually are backwards.)\n\nword-or-variable:\t trainer","name":"cleartrainerflag"},{"args":[{"kind":"word-or-variable","name":" trainer"}],"structure":"<BH","cmd":98,"doc_string":"Clears Flag (trainer + 0x500). (I didn't make a mistake. The command names actually are backwards.)\n\nword-or-variable:\t trainer","name":"settrainerflag"},{"args":[],"structure":"<B","cmd":102,"doc_string":"If a standard message box (or its text) is being drawn on-screen, this command blocks script execution until the box and its text have been fully drawn.","name":"waitmsg"},{"args":[{"kind":"pointer-or-bank-0","name":" text"}],"structure":"<BI","cmd":103,"doc_string":"Starts displaying a standard message box containing the specified text. If text is a pointer, then the string at that offset will be loaded and used. If text is script bank 0, then the value of script bank 0 will be treated as a pointer to the text. (You can use loadpointer to place a string pointer in a script bank.)\n\nThis function is not blocking; script execution will continue while the message box is still being displayed. Use waitmsg to block.\n\npointer-or-bank-0:\t text","name":"preparemsg"},{"args":[],"structure":"<B","cmd":104,"doc_string":"Holds the current message box open until the player presses a key. The message box is then closed.","name":"closeonkeypress"},{"args":[],"structure":"<B","cmd":105,"doc_string":"Ceases movement for all OWs on-screen.\n\n(Does this also affect OWs not on-screen? Viewing OAM data at run-time or possibly using a move-camera script could allow us to check.)","name":"lockall"},{"args":[],"structure":"<B","cmd":106,"doc_string":"If the script was called by a Person event, then that Person's movement will cease.","name":"lock"},{"args":[],"structure":"<B","cmd":107,"doc_string":"Resumes normal movement for all OWs on-screen, and closes any standard message boxes that are still open.","name":"releaseall"},{"args":[],"structure":"<B","cmd":108,"doc_string":"If the script was called by a Person event, then that Person's movement will resume. This command also closes any standard message boxes that are still open.","name":"release"},{"args":[],"structure":"<B","cmd":109,"doc_string":"Blocks script execution until the player presses any key.","name":"waitkeypress"},{"args":[{"kind":"byte","name":" X"},{"kind":"byte","name":" Y"}],"structure":"<BBB","cmd":110,"doc_string":"Displays a YES/NO multichoice box at the specified coordinates, and blocks script execution until the user makes a selection. Their selection is stored in variable 0x800D (LASTRESULT); 0x0000 for \"NO\" or if the user pressed B, and 0x0001 for \"YES\".\n\nbyte:\t X\nbyte:\t Y","name":"yesnobox"},{"args":[{"kind":"byte","name":" X"},{"kind":"byte","name":" Y"},{"kind":"byte","name":" list"},{"kind":"byte","name":" B"}],"structure":"<BBBBB","cmd":111,"doc_string":"Displays a multichoice box from which the user can choose a selection, and blocks script execution until a selection is made. Lists of options are predefined and the one to be used is specified with list. If B is set to a non-zero value, then the user will not be allowed to back out of the multichoice with the B button.\n\nThe user's selection is stored as a zero-indexed integer in variable 0x800D (LASTRESULT). If they backed out with B, LASTRESULT will be 0x7F.\n\nbyte:\t X\nbyte:\t Y\nbyte:\t list\nbyte:\t B","name":"multichoice"},{"args":[{"kind":"byte","name":" X"},{"kind":"byte","name":" Y"},{"kind":"byte","name":" list"},{"kind":"byte","name":" default"},{"kind":"byte","name":" B"}],"structure":"<BBBBBB","cmd":112,"doc_string":"Displays a multichoice box from which the user can choose a selection, and blocks script execution until a selection is made. Lists of options are predefined and the one to be used is specified with list. The default argument determines the initial position of the cursor when the box is first opened; it is zero-indexed, and if it is too large, it is treated as 0x00. If B is set to a non-zero value, then the user will not be allowed to back out of the multichoice with the B button.\n\nThe user's selection is stored as a zero-indexed integer in variable 0x800D (LASTRESULT). If they backed out with B, LASTRESULT will be 0x7F.\n\nbyte:\t X\nbyte:\t Y\nbyte:\t list\nbyte:\t default\nbyte:\t B","name":"multichoice2"},{"args":[{"kind":"byte","name":" X"},{"kind":"byte","name":" Y"},{"kind":"byte","name":" list"},{"kind":"byte","name":" per_row"},{"kind":"byte","name":" B"}],"structure":"<BBBBBB","cmd":113,"doc_string":"Displays a multichoice box from which the user can choose a selection, and blocks script execution until a selection is made. Lists of options are predefined and the one to be used is specified with list. The per_row argument determines how many list items will be shown on a single row of the box.\n\nThe total number of options must be divisible by the number of options per row. \"Orphaned\" options will not be displayed or selectable. If the number of options per row is greater than the total number of options, then no choices will be visible or selectable.\n\nThe user's selection is stored as a zero-indexed integer in variable 0x800D (LASTRESULT). If they backed out with B, LASTRESULT will be 0x7F.\n\nbyte:\t X\nbyte:\t Y\nbyte:\t list\nbyte:\t per_row\nbyte:\t B","name":"multichoice3"},{"args":[{"kind":"word-or-variable","name":" species"},{"kind":"byte","name":" X"},{"kind":"byte","name":" Y"}],"structure":"<BHBB","cmd":117,"doc_string":"Displays a box containing the front sprite for the specified (species) Pokémon species.\n\nword-or-variable:\t species\nbyte:\t X\nbyte:\t Y","name":"showpokepic"},{"args":[],"structure":"<B","cmd":118,"doc_string":"Hides all boxes displayed with showpokepic.\n\nIf this command is called too quickly after showpokepic, then it will fail to hide the Pokémon picture box and it will hang the script engine. My guess is that problems specifically happen if this command runs while the game is still trying to draw the showpokepic box.","name":"hidepokepic"},{"args":[{"kind":"byte","name":" a"}],"structure":"<BB","cmd":119,"doc_string":"In FireRed, this command is a nop. (The argument is discarded.)\n\nIn R/S/E, it displayed the paintaing of the winner of the specified (a) Pokémon Contest.\n\nbyte:\t a","name":"showcontestwinner"},{"args":[{"kind":"pointer-or-bank-0","name":" text"}],"structure":"<BI","cmd":120,"doc_string":"Displays the string at pointer as braille text in a standard message box. The string must be formatted to use braille characters.\n\nNote that the \\l and \\p string control codes are not supported, and braille text is too large to use \\n. To show multi-line or multi-part braille messages, you must use a clever scripting technique involving the braille2 command. You can see the script technique if you decompile Signpost scripts used in the Ruby and Sapphire chambers in Mt. Ember.\n\npointer-or-bank-0:\t text","name":"braille"},{"args":[{"kind":"word-or-variable","name":" species"},{"kind":"byte","name":" level"},{"kind":"word","name":" item"},{"kind":"dword","name":" unknown1"},{"kind":"dword","name":" unknown2"},{"kind":"byte","name":" unknown3"}],"structure":"<BHBHIIB","cmd":121,"doc_string":"Gives the player one of the specified (species) Pokémon at level level holding item. The unknown arguments should all be zeroes.\n\nThis function will also modify certain script variables to indicate the result of the command. Variable 0x800D (LASTRESULT) will be set to 0x0000 if the Pokémon was stored in the party; 0x0001 if the Pokémon was transferred to the PC; and 0x0002 if there was no room in the party or the PC. Variable 0x4037 appears to be set to the number of the PC Box that the Pokémon was sent to (if it was boxed). Flag 0x843 may be cleared (and then set) if the Pokémon was boxed.\n\n(Confirm that this command specifically modifies var 0x4037.)\n\nword-or-variable:\t species\nbyte:\t level\nword:\t item\ndword:\t unknown1\ndword:\t unknown2\nbyte:\t unknown3","name":"givePokémon"},{"args":[{"kind":"word","name":" index"}],"structure":"<BH","cmd":124,"doc_string":"Checks if at least one Pokémon in the player's party knows the specified (index) attack. If so, variable 0x800D (LASTRESULT) is set to the (zero-indexed) slot number of the Pokémon that knows the move. If not, LASTRESULT is set to 0x0006.\n\n(Does this accept a variable? If multiple Pokémon in the party know the attack, what is written to LASTRESULT?)\n\nword:\t index","name":"checkattack"},{"args":[{"kind":"buffer","name":" out"},{"kind":"word-or-variable","name":" species"}],"structure":"<BBH","cmd":125,"doc_string":"Writes the name of the Pokémon at index species to the specified buffer.\n\n...Specifically, the game tries to read a string starting at 0x08245EE0 + (0xB * species), the offset in that formula being a table of Pokémon names padded to ten bytes and separated by 0xFFs. The game does not validate the species number; if it is larger than the number of Pokémon in the game, the game ends up trying to read from the data after the table, resulting in garbled strings or even a crash.\n\nbuffer:\t out\nword-or-variable:\t species","name":"bufferPokémon"},{"args":[{"kind":"buffer","name":" out"}],"structure":"<BB","cmd":126,"doc_string":"Writes the name of the first Pokémon in the player's party to the specified buffer.\n\n(Does this buffer nicknames, if present? What happens if the player has no Pokémon?)\n\nIt appears to buffer ten question marks if you have no PokÃ©mon. It doesn't buffer nicknames, even if they're present.\n\nbuffer:\t out","name":"bufferfirstPokémon"},{"args":[{"kind":"buffer","name":" out"},{"kind":"word-or-variable","name":" slot"}],"structure":"<BBH","cmd":127,"doc_string":"Writes the name of the Pokémon in slot slot (zero-indexed) of the player's party to the specified buffer. If an empty or invalid slot is specified, ten spaces (\"          \") are written to the buffer.\n\n(Does this buffer nicknames, if present?)\n\nIt appears to buffer nicknames.\n\nbuffer:\t out\nword-or-variable:\t slot","name":"bufferpartyPokémon"},{"args":[{"kind":"buffer","name":" out"},{"kind":"word-or-variable","name":" item"}],"structure":"<BBH","cmd":128,"doc_string":"Writes the name of the item at index item to the specified buffer. If the specified index is larger than the number of items in the game (0x176), the name of item 0 (\"????????\") is buffered instead.\n\nA tip: if the item is a Poke Ball (0x0004) or any Berry except the Enigma Berry (0x0085 - 0x00AE), you can pluralize the name with bufferitems.\n\nbuffer:\t out\nword-or-variable:\t item","name":"bufferitem"},{"args":[{"kind":"byte","name":null},{"kind":"word-or-variable","name":" b"}],"structure":"<BBH","cmd":129,"doc_string":"In FireRed, this command is a nop. (The first argument is discarded immediately. The second argument is read, but not used for anything.)\n\nIn R/S/E, this command wrote the name of the decoration at index b to the specified (a) buffer.\n\nbyte:\tnull\nword-or-variable:\t b","name":"bufferdecoration"},{"args":[{"kind":"buffer","name":" out"},{"kind":"word-or-variable","name":" attack"}],"structure":"<BBH","cmd":130,"doc_string":"Writes the name of the attack at index attack to the specified buffer.\n\n...Specifically, the game tries to read a string starting at 0x08247094 + (0xD * attack), the offset in that formula being a table of attack names padded unevenly but such that each first letter is 0xD bytes apart. The game does not validate the attack number; if it is larger than the number of attacks in the game (0x162), the game ends up trying to read from the data after the table, resulting in garbled strings or even a reset.\n\nbuffer:\t out\nword-or-variable:\t attack","name":"bufferattack"},{"args":[{"kind":"buffer","name":" out"},{"kind":"word-or-variable","name":" input"}],"structure":"<BBH","cmd":131,"doc_string":"Converts the value of input to a decimal string, and writes that string to the specified buffer.\n\nbuffer:\t out\nword-or-variable:\t input","name":"buffernumber"},{"args":[{"kind":"buffer","name":" out"},{"kind":"word-or-variable","name":" index"}],"structure":"<BBH","cmd":132,"doc_string":"Writes the standard string identified by index to the specified buffer. Specifying an invalid standard string (e.x. 0x2B) can and usually will cause data corruption (I've observed destruction of the stored player name and crashes when entering/exiting certain menu screens).\n\nThese are the standard strings in Pokémon FireRed (BPRE):\n\nbuffer:\t out\nword-or-variable:\t index","name":"bufferstd"},{"args":[{"kind":"buffer","name":" out"},{"kind":"pointer","name":" offset"}],"structure":"<BBI","cmd":133,"doc_string":"Copies the string at offset to the specified buffer.\n\nbuffer:\t out\npointer:\t offset","name":"bufferstring"},{"args":[{"kind":"pointer","name":" products"}],"structure":"<BI","cmd":134,"doc_string":"Opens the Pokemart system, offering the specified products for sale.\n\nThe products argument should point to a list of words. Each word is the identifier of an item to be sold. 0x0000 terminates the list.\n\npointer:\t products","name":"pokemart"},{"args":[{"kind":"pointer","name":" products"}],"structure":"<BI","cmd":135,"doc_string":"Apparent clone of pokemart.\n\npointer:\t products","name":"pokemart2"},{"args":[{"kind":"pointer","name":" products"}],"structure":"<BI","cmd":136,"doc_string":"Apparent clone of pokemart.\n\npointer:\t products","name":"pokemart3"},{"args":[],"structure":"<B","cmd":138,"doc_string":"In FireRed, this command is a nop.\n\nWarning: XSE has it wrong. The function has no arguments. This means that you may need to use #raw to compile a script that uses this command, and that such scripts will not decompile properly.","name":"cmd8a"},{"args":[],"structure":"<B","cmd":139,"doc_string":"In FireRed, this command sets the byte at 0x03000EA8 to 0x01. I do not know what that means.\n\nIn R/S/E, it prompted the player to choose a Pokémon to enter into a Pokémon Contest.","name":"choosecontestpkmn"},{"args":[],"structure":"<B","cmd":140,"doc_string":"In FireRed, this command is a nop.\n\nIn R/S/E, it started a Pokémon Contest.","name":"startcontest"},{"args":[],"structure":"<B","cmd":141,"doc_string":"In FireRed, this command is a nop.\n\nIn R/S/E, it showed the results of a Pokémon Contest.","name":"showcontestresults"},{"args":[],"structure":"<B","cmd":142,"doc_string":"In FireRed, this command is a nop.\n\nIn Emerald, it apparently started a Pokémon Contest over a wireless connection.","name":"contestlinktransfer"},{"args":[{"kind":"word-or-variable","name":" limit"}],"structure":"<BH","cmd":143,"doc_string":"Stores a random integer between 0 and limit in variable 0x800D (LASTRESULT).\n\nThe number will always be less than limit.\n\nword-or-variable:\t limit","name":"random"},{"args":[{"kind":"dword","name":" value"},{"kind":"byte","name":" check"}],"structure":"<BIB","cmd":144,"doc_string":"If check is 0x00, this command adds value to the player's money.\n\n(Can this overflow?)\n\ndword:\t value\nbyte:\t check","name":"givemoney"},{"args":[{"kind":"dword","name":" value"},{"kind":"byte","name":" check"}],"structure":"<BIB","cmd":145,"doc_string":"If check is 0x00, this command subtracts value from the player's money.\n\n(Can this overflow?)\n\nIt cannot \"over\"flow (technically underflow).\n\ndword:\t value\nbyte:\t check","name":"paymoney"},{"args":[{"kind":"dword","name":" value"},{"kind":"byte","name":" check"}],"structure":"<BIB","cmd":146,"doc_string":"If check is 0x00, this command will check if the player has value or more money; script variable 0x800D (LASTRESULT) is set to 0x0001 if the player has enough money, or 0x0000 if the do not.\n\ndword:\t value\nbyte:\t check","name":"checkmoney"},{"args":[{"kind":"byte","name":" X"},{"kind":"byte","name":" Y"}],"structure":"<BBB","cmd":147,"doc_string":"Spawns a secondary box showing how much money the player has.\n\nThe box does not update automatically. If you change how much money the player has after using showmoney, you must use updatemoney to display the new amount. The box can be hidden using hidemoney.\n\n(Need to test this to find its quirks...)\n\nbyte:\t X\nbyte:\t Y","name":"showmoney"},{"args":[{"kind":"byte","name":" X"},{"kind":"byte","name":" Y"}],"structure":"<BBB","cmd":148,"doc_string":"Hides the secondary box spawned by showmoney.\n\n(Does this discard its arguments like hidecoins does?)\n\nbyte:\t X\nbyte:\t Y","name":"hidemoney"},{"args":[{"kind":"byte","name":" X"},{"kind":"byte","name":" Y"}],"structure":"<BBB","cmd":149,"doc_string":"Updates the secondary box spawned by showmoney. (What does it do with its arguments?)\n\nYou'd want to use this if you change how much money the player has after using showmoney.\n\nbyte:\t X\nbyte:\t Y","name":"updatemoney"},{"args":[],"structure":"<B","cmd":150,"doc_string":"In FireRed, this command is a nop.\n\nWarning: XSE has it wrong. The function has no arguments. This means that you may need to use #raw to compile a script that uses this command, and that such scripts will not decompile properly.","name":"cmd96"},{"args":[{"kind":"byte","name":" effect"}],"structure":"<BB","cmd":151,"doc_string":"Fades the screen to black or back, using the specified effect. Effect 0x00 fades in, and effect 0x01 fades out. I don't know if other effects exist.\n\nIf effect 0x00 is used when the screen isn't actually faded to black, then the screen will be immediately blackened and then faded back in, producing a \"blinking\" effect.\n\n(Does this block?)\n\nbyte:\t effect","name":"fadescreen"},{"args":[{"kind":"word","name":" animation"}],"structure":"<BH","cmd":156,"doc_string":"Executes the specified field move animation.\n\nThe animations are defined in a table stored in the ROM, and they use their own scripting engine. More information can be found in a post on PokeCommunity.\n\nThese are the animations that have been found in Pokémon FireRed (BPRE):\n\n(Does it accept a variable? Test and confirm 01, 1E, 26, 3F, 41.)\n\nword:\t animation","name":"doanimation"},{"args":[{"kind":"byte","name":" animation"},{"kind":"word-or-variable","name":" slot"}],"structure":"<BBH","cmd":157,"doc_string":"Tells the game which party Pokémon to use for the next field move animation.\n\n(What does the byte do?)\n\nbyte:\t animation\nword-or-variable:\t slot","name":"setanimation"},{"args":[{"kind":"word","name":" animation"}],"structure":"<BH","cmd":158,"doc_string":"Blocks script execution until all playing field move animations complete.\n\n(What does the word do?)\n\nword:\t animation","name":"checkanimation"},{"args":[{"kind":"word","name":" flightspot"}],"structure":"<BH","cmd":159,"doc_string":"Sets which healing place the player will return to if all of the Pokémon in their party faint. A list of available healing places can be found on PokeCommunity.\n\n(Does it accept a variable? And what happens if we supply a value of 0x00?)\n\nword:\t flightspot","name":"sethealingplace"},{"args":[],"structure":"<B","cmd":160,"doc_string":"Checks the player's gender. If male, then 0x0000 is stored in variable 0x800D (LASTRESULT). If female, then 0x0001 is stored in LASTRESULT.","name":"checkgender"},{"args":[{"kind":"word-or-variable","name":" species"},{"kind":"word","name":" effect"}],"structure":"<BHH","cmd":161,"doc_string":"Plays the specified (species) Pokémon's cry. You can use waitcry to block script execution until the sound finishes.\n\n(What is the effect? Can it be a variable?)\n\nword-or-variable:\t species\nword:\t effect","name":"cry"},{"args":[{"kind":"word","name":" X"},{"kind":"word","name":" Y"},{"kind":"word","name":" tile_number"},{"kind":"word","name":" tile_attrib"}],"structure":"<BHHHH","cmd":162,"doc_string":"Changes the tile at (X, Y) on the current map.\n\n(Can some or all arguments be variables? What is tile_attrib? It's usually 0x0 or 0x1, but I don't think it's a movement permission.)\n\nword:\t X\nword:\t Y\nword:\t tile_number\nword:\t tile_attrib","name":"setmaptile"},{"args":[],"structure":"<B","cmd":163,"doc_string":"Queues a weather change to the default weather for the map.\n\n(Only one weather change can be queued at once?)","name":"resetweather"},{"args":[{"kind":"word","name":" type"}],"structure":"<BH","cmd":164,"doc_string":"Queues a weather change to type weather.\n\n(Only one weather change can be queued at once?)\n\n(Does this accept variables?)\n\nword:\t type","name":"setweather"},{"args":[],"structure":"<B","cmd":165,"doc_string":"Executes the weather change queued with resetweather or setweather. The current weather will smoothly fade into the queued weather.\n\n(Does this block?)","name":"doweather"},{"args":[{"kind":"byte","name":" subroutine"}],"structure":"<BB","cmd":166,"doc_string":"This command manages cases in which maps have tiles that change state when stepped on (specifically, cracked/breakable floors).\n\nThink of cmda6 as a script-friendly way to access Game Freak's official walking script implementation (but with ASM instead of scripts). This command allows you to select which one of eight predefined ASM subroutines should be enabled.\n\nWhen the player steps on a tile with behavior byte 0x26 (uncracked ice), it changes into Tile 35A (cracked ice). When they step on a tile with behavior byte 0x27 (cracked ice), it changes into Tile 35B (hole) after a four-frame delay and script variable 0x4001 is set to 0x0001.\n\nThis subroutine also compares the player's coordinates to a set of nine X/Y coordinate pairs stored at 0x083A7330, and sets one of the temporary script flags (0x001 - 0x009) if there's a match. Each coordinate pair corresponds exactly to a breakable ice tile in Icefall Cave; in combination with a level script, I think this saves tile states when the game is saved.\n\nAt 0x03005090, there is an execution queue -- a list of ASM functions to be executed on every frame. (Each list item also has a small amount of space to use to maintain its state.) Cmda6 checks the queue to see if a specific ASM routine, the walking routine manager at 0x0806E811, is there. If so, cmda6 clears the state data for that queue item, and then inserts the argument you specify into the state data.\n\nWhen the walking routine manager runs (once every frame), it reads the injected state data and uses that to determine which walking subroutine it should call. (Eight are allowed, three of which are defined and one of which actually works.) It then calls the selected walking subroutine, which will generally perform some action if the player has taken a step (usually, changing the tile under their feet).\n\nBundled in this resource's ZIP should be a file, CmdA6, disassembled and rewritten.txt. (If I've forgotten to include it, remind me.) That file contains the assembly code for CmdA6, the tile manager routine, and the three subroutines (rewritten in a pseudosyntax which you may or may not find more readable). Studying that should provide you with most of the information you would need to, say, add a subroutine of your own to create a cmda6-managed walking function that is accurate to the frame.\n\nbyte:\t subroutine","name":"cmda6"},{"args":[{"kind":"word","name":" X"},{"kind":"word","name":" Y"}],"structure":"<BHH","cmd":172,"doc_string":"Queues the opening of the door tile at (X, Y) with an animation.\n\n(Does this accept variables? What happens if it's used on a tile that isn't a door?)\n\nword:\t X\nword:\t Y","name":"setdooropened"},{"args":[{"kind":"word","name":" X"},{"kind":"word","name":" Y"}],"structure":"<BHH","cmd":173,"doc_string":"Queues the closing of the door tile at (X, Y) with an animation.\n\n(Does this accept variables? What happens if it's used on a tile that isn't a door?)\n\nword:\t X\nword:\t Y","name":"setdoorclosed"},{"args":[],"structure":"<B","cmd":174,"doc_string":"Executes the state changes queued with setdooropened, setdoorclosed, setdooropened2, and setdoorclosed2.\n\n(Does this block for animated door changes? For both?)","name":"doorchange"},{"args":[{"kind":"word","name":" X"},{"kind":"word","name":" Y"}],"structure":"<BHH","cmd":175,"doc_string":"Queues the opening of the door tile at (X, Y) without an animation.\n\n(Does this accept variables? What happens if it's used on a tile that isn't a door?)\n\nword:\t X\nword:\t Y","name":"setdooropened2"},{"args":[{"kind":"word","name":" X"},{"kind":"word","name":" Y"}],"structure":"<BHH","cmd":176,"doc_string":"Queues the closing of the door tile at (X, Y) without an animation.\n\n(Does this accept variables? What happens if it's used on a tile that isn't a door?)\n\nword:\t X\nword:\t Y","name":"setdoorclosed2"},{"args":[],"structure":"<B","cmd":177,"doc_string":"In FireRed, this command is a nop.\n\nWarning: XSE has it wrong. The function has no arguments. This means that you may need to use #raw to compile a script that uses this command, and that such scripts will not decompile properly.","name":"cmdb1"},{"args":[],"structure":"<B","cmd":178,"doc_string":"In FireRed, this command is a nop.","name":"cmdb2"},{"args":[{"kind":"word","name":" species"},{"kind":"byte","name":" level"},{"kind":"word","name":" item"}],"structure":"<BHBH","cmd":182,"doc_string":"Prepares to start a wild battle against a species at Level level holding item. Running this command will not affect normal wild battles. You start the prepared battle with dowildbattle.\n\nTo be specific, this command will automatically generate a 100-byte Pokémon matching the provided arguments, and store it at 0x0202402C (the RAM location of the first enemy in a battle). The RAM for enemies 2-6 is also cleared. This allows a script to generate a wild Pokémon before initiating a battle.\n\nThe uses for generating a Pokémon in this manner are many and varied. Hypothetically speaking, one could call this command, use writebytetooffset to pre-damage the generated Pokémon, and then run dowildbattle.\n\n(Can the item be a variable?) Tests would suggest that, no, items cannot be set through variables.\n\nword:\t species\nbyte:\t level\nword:\t item","name":"setwildbattle"},{"args":[],"structure":"<B","cmd":183,"doc_string":"Starts a wild battle against the Pokémon generated by setwildbattle. Blocks script execution until the battle finishes.\n\nIf the Pokémon created by setwildbattle was invalid, then this command will hang and a battle will not start.\n\n(Nonexistent species such as 0x4000 are known to cause invalid Pokémon... But would other Pokémon (i.e. broken checksums, or stats in the last 20 bytes being modified) cause problems as well?)","name":"dowildbattle"},{"args":[{"kind":"byte","name":" X"},{"kind":"byte","name":" Y"}],"structure":"<BBB","cmd":192,"doc_string":"Spawns a secondary box showing how many Coins the player has.\n\nThe box does not update automatically. If you change how many Coins the player has after using showcoins, you must use updatecoins to display the new amount. The box can be hidden using hidecoins.\n\nbyte:\t X\nbyte:\t Y","name":"showcoins"},{"args":[{"kind":"byte","name":null},{"kind":"byte","name":null}],"structure":"<BBB","cmd":193,"doc_string":"Hides the secondary box spawned by showcoins. It doesn't appear to use its arguments, but they are still required.\n\nbyte:\tnull\nbyte:\tnull","name":"hidecoins"},{"args":[{"kind":"byte","name":" X"},{"kind":"byte","name":" Y"}],"structure":"<BBB","cmd":194,"doc_string":"Updates the secondary box spawned by showcoins. (What does it do with its arguments?)\n\nYou'd want to use this if you change how many Coins the player has after using showcoins.\n\nbyte:\t X\nbyte:\t Y","name":"updatecoins"},{"args":[{"kind":"hidden-variable","name":" a"}],"structure":"<BB","cmd":195,"doc_string":"Increases the value of the specified hidden variable by 1. The hidden variable's value will not be allowed to exceed 0x00FFFFFF.\n\nThe PokeCenter nurses use this to increment hidden variable 15 (0xF) just after you pick \"YES\" to heal your party. I don't know why.\n\nIt appears these hidden variables correspond to the encrypted counters documented in this PokéCommunity post. 0xF in that list is indeed # of PokÃ©Center heals, which corresponds to what DavidJCobb documented the PC script increments.\n\nhidden-variable:\t a","name":"cmdc3"},{"args":[],"structure":"<B","cmd":196,"doc_string":"Clone of warp... Except that it doesn't appear to have any effect when used in some of FireRed's default level scripts. (If it did, Berry Forest would be impossible to enter...)","name":"warp6"},{"args":[],"structure":"<B","cmd":197,"doc_string":"Blocks script execution until cry finishes.","name":"waitcry"},{"args":[{"kind":"buffer","name":" out"},{"kind":"word-or-variable","name":" box"}],"structure":"<BBH","cmd":198,"doc_string":"Writes the name of the specified (box) PC box to the specified buffer.\n\nbuffer:\t out\nword-or-variable:\t box","name":"bufferboxname"},{"args":[{"kind":"byte","name":" color"}],"structure":"<BB","cmd":199,"doc_string":"Sets the color of the text in standard message boxes. 0x00 produces blue (male) text, 0x01 produces red (female) text, 0xFF resets the color to the default for the current OW's gender, and all other values produce black text.\n\nThis command does not affect braille text. Colors specified with this command will be overriden by colors specified by control codes in the string.\n\n(The command writes a byte to 0x020370DA, and that byte is reset to 0xFF every frame.)\n\nbyte:\t color","name":"textcolor"},{"args":[{"kind":"pointer-or-bank-0","name":" string"}],"structure":"<BI","cmd":200,"doc_string":"The exact purpose of this command is unknown, but it is related to the blue help-text box that appears on the bottom of the screen when the Main Menu is opened.\n\nThis command will load the appropriate palette and tiles for a help-text box containing the specified string. It also writes data for a new dialog box into RAM. However, the dialog box is not displayed.\n\nNote that when this command loads the palette and tiles, it overwrites the frame tiles in use by any standard message boxes that may already be on-screen. Their frames change into (improperly-displayed) help-text frames, though the text remains completely unchanged.\n\nWarning: XSE has it wrong. The function has one four-byte argument. This means that you will need to use #raw to compile a script that uses this command, and that such scripts will not decompile properly.\n\npointer-or-bank-0:\t string","name":"cmdc8"},{"args":[],"structure":"<B","cmd":201,"doc_string":"The exact purpose of this command is unknown, but it is related to the blue help-text box that appears on the bottom of the screen when the Main Menu is opened.\n\nThis command appears to unload most of the text and frame tiles that cmdc8 loads into memory, though it will not restore overwritten frame tiles used by other dialog boxes.","name":"cmdc9"},{"args":[],"structure":"<B","cmd":202,"doc_string":"After using this command, all standard message boxes will use the signpost frame.","name":"signmsg"},{"args":[],"structure":"<B","cmd":203,"doc_string":"Ends the effects of signmsg, returning message box frames to normal.","name":"normalmsg"},{"args":[{"kind":"hidden-variable","name":" a"},{"kind":"dword","name":" value"}],"structure":"<BBI","cmd":204,"doc_string":"Compares the value of a hidden variable to a dword.\n\nWarning: XSE has it wrong. The second argument is a dword, not a word. This means that you will need to use #raw to compile a script that uses this command, and that such scripts will not decompile properly.\n\nhidden-variable:\t a\ndword:\t value","name":"comparehiddenvar"},{"args":[{"kind":"word","name":" slot"}],"structure":"<BH","cmd":205,"doc_string":"Makes the Pokémon in the specified slot of the player's party obedient. It will not randomly disobey orders in battle.\n\n(Can the slot be a variable?)\n\nword:\t slot","name":"setobedience"},{"args":[{"kind":"word-or-variable","name":" slot"}],"structure":"<BH","cmd":206,"doc_string":"Checks if the Pokémon in the specified slot of the player's party is obedient. If the Pokémon is disobedient, 0x0001 is written to script variable 0x800D (LASTRESULT). If the Pokémon is obedient (or if the specified slot is empty or invalid), 0x0000 is written.\n\nword-or-variable:\t slot","name":"checkobedience"},{"args":[],"structure":"<B","cmd":207,"doc_string":"Depending on factors I haven't managed to understand yet, this command may cause script execution to jump to the offset specified by the pointer at 0x020370A4.\n\nThis command uses what appear to be checksums at [0x03005008] + 0x32E0 and [0x03005008] + 0x361C to validate data pointed to by pointers at [0x03005008] + 0x32E4 (target is 332 bytes) and [0x03005008] + 0x3620 (target is either 1000 or 1004 bytes), respectively. If this validation fails, the command does nothing. Unfortunately, I've looked at the ASM every way I can; unless someone figures out what's at those DMA-protected RAM offsets, this command's function will remain a mystery.","name":"executeram"},{"args":[{"kind":"flag-or-variable","name":" worldmapflag"}],"structure":"<BH","cmd":208,"doc_string":"Sets worldmapflag to 1. This allows the player to Fly to the corresponding map, if that map has a flightspot.\n\nSpecifically, the command will set the specified flag if all of the following requirements are met, and will apparently do nothing if one or more of the requirements are not met:\n\nflag-or-variable:\t worldmapflag","name":"setworldmapflag"},{"args":[],"structure":"<B","cmd":209,"doc_string":"Clone of warpteleport? It is apparently only used in FR/LG, and only with specials.[source]","name":"warpteleport2"},{"args":[{"kind":"word-or-variable","name":" slot"},{"kind":"byte","name":" location"}],"structure":"<BHB","cmd":210,"doc_string":"Changes the location where the player caught the Pokémon in the specified slot of their party. A list of valid catch locations can be found on PokeCommunity.\n\nword-or-variable:\t slot\nbyte:\t location","name":"setcatchlocation"},{"args":[{"kind":"pointer-or-bank-0","name":" text"}],"structure":"<BI","cmd":211,"doc_string":"Sets variable 0x8004 to a value based on the width of the braille string at text.\n\nBecause braille strings do not support the \\p or \\l control codes, Game Freak had to create a \"fake\" message cursor every time they wanted to show multi-part or multi-line braille strings. To facilitate this, they created special 0x1B2, which draws a cursor on the screen at a position specified by variables 0x8004 (X) and 0x8005 (Y).\n\nThis command, braille2, will calculate the length of a specified braille string, and then set 0x8004 to a value based on that length. If you then show that string in a message box and call special 0x1B2, a cursor will appear exactly at the end of the braille string.\n\npointer-or-bank-0:\t text","name":"braille2"},{"args":[{"kind":"buffer","name":" out"},{"kind":"word-or-variable","name":" item"},{"kind":"word-or-variable","name":" quantity"}],"structure":"<BBHH","cmd":212,"doc_string":"Writes the name of the specified (item) item to the specified buffer. If the specified item is a Berry (0x85 - 0xAE) or Poke Ball (0x4) and if the quantity is 2 or more, the buffered string will be pluralized (\"IES\" or \"S\" appended). If the specified item is the Enigma Berry, I have no idea what this command does (but testing showed no pluralization). If the specified index is larger than the number of items in the game (0x176), the name of item 0 (\"????????\") is buffered instead.\n\n(The Enigma Berry is treated as a special case and handled with ASM that, among many other things, appears to conditionally read from a table at 0x083DF7CC. What the hell is this command doing for Enigma Berries?)\n\nbuffer:\t out\nword-or-variable:\t item\nword-or-variable:\t quantity","name":"bufferitems"},{"args":[],"structure":"<B","cmd":213,"doc_string":"In FireRed, this command is a nop.\n\nWarning: XSE has it wrong. The function has no arguments. This means that you may need to use #raw to compile a script that uses this command, and that such scripts will not decompile properly.","name":"cmdd5"}]